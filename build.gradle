buildscript {
    repositories {
        maven {
            url "https://oss.sonatype.org"
        }
        mavenCentral()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: 'maven'
apply plugin: 'signing'
//apply plugin: 'com.github.johnrengelman.shadow'

def shouldPublishLocally = System.getProperty('LOCAL_PUBLISH')
URL localRepo = new File("${System.getProperty('user.home')}/.m2/repository").toURI().toURL()
URL repoUrl = shouldPublishLocally ? localRepo : URI.create('https://oss.sonatype.org/service/local/staging/deploy/maven2').toURL()

ext {
    if (!project.hasProperty('sonatypeUser')) sonatypeUser = ''
    if (!project.hasProperty('sonatypePassword')) sonatypePassword = ''
}

group 'org.wiremock'
version '1.1.0'

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

targetCompatibility = 1.7
sourceCompatibility = 1.7

repositories {
    mavenCentral()
    mavenLocal()
}

def versions = [
        wiremock: '2.26.0'
]

dependencies {
    compile "com.github.tomakehurst:wiremock:${versions.wiremock}"

    testCompile 'junit:junit:4.12'
    testCompile "org.hamcrest:hamcrest-all:1.3"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
//    archives shadowJar
}

def projectPom = {
    name = 'wiremock-webhooks-extension'
    description = 'A WireMock extension for simulating webhooks'
    url = 'https://github.com/wiremock/wiremock-webhooks-extension'

    scm {
        connection 'https://github.com/wiremock/wiremock-webhooks-extension.git'
        developerConnection 'https://github.com/wiremock/wiremock-webhooks-extension.git'
        url 'https://github.com/wiremock/wiremock-webhooks-extension.git'
    }

    licenses {
        license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
        }
    }

    developers {
        developer {
            id = 'tomakehurst'
            name = 'Tom Akehurst'
            email = 'tom@wiremock.org'
        }
    }
}

install {
    repositories.mavenInstaller.pom.project(projectPom)
}

signing {
    required { gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { deployment -> signing.signPom(deployment) }

        repository(url: repoUrl) {
            authentication(userName: sonatypeUser, password: sonatypePassword)
        }

        pom.project(projectPom)
    }
}

task addGitTag << {
    if (!shouldPublishLocally) {
        println "git tag ${version}".execute().text
        println "git push origin --tags".execute().text
    }
}

//shadowJar.mustRunAfter jar

task release {
    dependsOn clean, jar, signArchives, uploadArchives, addGitTag
}
